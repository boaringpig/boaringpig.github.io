// main.js
// This is the main entry point for the application.

// Global application state variables
const users = {
	admin: {
		password: "admin123",
		role: "admin",
		displayName: "Administrator",
		permissions: [
			"create_task",
			"approve_task",
			"delete_task",
			"view_all_tasks",
			"manage_users",
			"view_dashboard",
			"approve_suggestions",
		],
		points: 0,
	},
	user: {
		password: "user123",
		role: "user",
		displayName: "User",
		permissions: ["check_task", "view_assigned_tasks", "suggest_task"],
		points: 0,
	},
};
let currentUser = null;
let tasks = [];
let suggestions = [];
let userActivityLog = [];

// Counters for client-side ID generation (for tables not using DB auto-increment)
// IMPORTANT: Ensure your Supabase tables are configured for auto-incrementing IDs
// where appropriate (e.g., BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY).
// If not, client-side counters are used, but can lead to conflicts if not managed carefully.
let taskIdCounter = 1;
let suggestionIdCounter = 1;
let activityIdCounter = 1; // Used for userActivity if DB doesn't auto-increment

let overdueCheckIntervalId = null;
const OVERDUE_CHECK_INTERVAL = 5 * 60 * 1000; // Check every 5 minutes (in milliseconds)
let currentDate = new Date();
let activeTab = "tasks";

// Make global variables accessible via window object for inter-file communication
window.users = users;
window.currentUser = currentUser;
window.tasks = tasks;
window.suggestions = suggestions;
window.userActivityLog = userActivityLog;
window.taskIdCounter = taskIdCounter;
window.suggestionIdCounter = suggestionIdCounter;
window.activityIdCounter = activityIdCounter;
window.overdueCheckIntervalId = overdueCheckIntervalId;
window.OVERDUE_CHECK_INTERVAL = OVERDUE_CHECK_INTERVAL;
window.currentDate = currentDate;
window.activeTab = activeTab;

// Initialize Supabase client and attempt auto-login on page load
window.addEventListener("load", function () {
	// Initialize Supabase client first
	window.initializeSupabaseClient(
		window.supabaseConfig.supabaseUrl,
		window.supabaseConfig.supabaseAnonKey
	);
	// Then attempt auto-login
	window.attemptAutoLogin();
});

// Event listeners for UI elements
document.addEventListener("DOMContentLoaded", function () {
	const loginForm = document.getElementById("loginForm");
	if (loginForm) {
		loginForm.addEventListener("submit", window.handleLogin);
	}

	const suggestForm = document.getElementById("suggestForm");
	if (suggestForm) {
		suggestForm.addEventListener("submit", window.submitTaskSuggestion);
	}

	const isRepeatingCheckbox = document.getElementById("isRepeating");
	if (isRepeatingCheckbox) {
		isRepeatingCheckbox.addEventListener("change", function () {
			const repeatOptions = document.getElementById("repeatOptions");
			if (repeatOptions) {
				repeatOptions.style.display = this.checked ? "block" : "none";
			}
		});
	}

	const isDemeritCheckbox = document.getElementById("isDemerit");
	if (isDemeritCheckbox) {
		isDemeritCheckbox.addEventListener("change", function () {
			const demeritWarning = document.getElementById("demeritWarning");
			if (demeritWarning) {
				demeritWarning.style.display = this.checked ? "block" : "none";
			}
			const taskPointsEl = document.getElementById("taskPoints");
			const penaltyPointsEl = document.getElementById("penaltyPoints");
			const taskDueDateEl = document.getElementById("taskDueDate");

			if (this.checked) {
				if (taskPointsEl)
					taskPointsEl.closest(".form-group").style.display = "none";
				if (taskDueDateEl)
					taskDueDateEl.closest(".form-group").style.display = "none";
				if (penaltyPointsEl)
					penaltyPointsEl.closest(".form-group").style.display =
						"block";
			} else {
				if (taskPointsEl)
					taskPointsEl.closest(".form-group").style.display = "block";
				if (taskDueDateEl)
					taskDueDateEl.closest(".form-group").style.display =
						"block";
				if (penaltyPointsEl)
					penaltyPointsEl.closest(".form-group").style.display =
						"block";
			}
		});
	}
});

// Global helper function for permission checks
window.hasPermission = function (permission) {
	const user = window.users[window.currentUser];
	return user && user.permissions.includes(permission);
};

// Global function to change month in calendar (defined in ui.js)
window.changeMonth = function (direction) {
	window.currentDate.setMonth(window.currentDate.getMonth() + direction);
	window.renderCalendar();
};
